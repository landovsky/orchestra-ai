#!/bin/bash
# bin/setup-master-agent

# Master Agent Setup Script (Local Git Orchestration Version)
# This script helps you set up the Master Agent orchestrator

set -e

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m'

echo -e "${BOLD}${BLUE}Master Agent Setup (Local Git Orchestration)${NC}"
echo "===================================================="
echo ""

# Check for required tools
echo -e "${BOLD}Checking prerequisites...${NC}"

MISSING=()

if ! command -v curl >/dev/null 2>&1; then
    MISSING+=("curl")
fi

if ! command -v jq >/dev/null 2>&1; then
    MISSING+=("jq")
fi

if ! command -v git >/dev/null 2>&1; then
    MISSING+=("git")
fi

if [ ${#MISSING[@]} -gt 0 ]; then
    echo -e "${RED}✗ Missing required tools: ${MISSING[*]}${NC}"
    echo ""
    echo "Please install them:"
    if [[ "$OSTYPE" == "darwin"* ]]; then
        echo -e "${YELLOW}  brew install ${MISSING[*]}${NC}"
    else
        echo -e "${YELLOW}  sudo apt-get install ${MISSING[*]}${NC}"
    fi
    exit 1
else
    echo -e "${GREEN}✓ All required tools are installed${NC}"
fi

# Check for API key
echo ""
echo -e "${BOLD}Checking API key...${NC}"

if [ -z "${CURSOR_API_KEY:-}" ]; then
    echo -e "${YELLOW}! CURSOR_API_KEY environment variable not set${NC}"
    echo ""
    echo "Please set your Cursor API key:"
    echo -e "${YELLOW}  export CURSOR_API_KEY='your-api-key-here'${NC}"
    echo ""
    echo "Or add it to your shell configuration:"
    echo -e "${YELLOW}  echo 'export CURSOR_API_KEY=\"your-api-key\"' >> ~/.zshrc${NC}"
    echo -e "${YELLOW}  source ~/.zshrc${NC}"
    echo ""
    read -p "Do you want to enter your API key now? (y/n) " -n 1 -r
    echo ""

    if [[ $REPLY =~ ^[Yy]$ ]]; then
        read -p "Enter your Cursor API key: " api_key
        export CURSOR_API_KEY="$api_key"
        echo -e "${GREEN}✓ API key set for this session${NC}"
        echo -e "${YELLOW}  Note: This is temporary. Add it to your ~/.zshrc for persistence.${NC}"
    else
        echo -e "${RED}Setup incomplete. Please set CURSOR_API_KEY and run this script again.${NC}"
        exit 1
    fi
else
    echo -e "${GREEN}✓ CURSOR_API_KEY is set${NC}"
fi

# Test API connection
echo ""
echo -e "${BOLD}Testing API connection...${NC}"

response=$(curl -s -w "\n%{http_code}" \
    -X GET "https://api.cursor.com/v0/me" \
    -H "Authorization: Bearer $CURSOR_API_KEY" 2>&1)

http_code=$(echo "$response" | tail -n1)

if [ "$http_code" == "200" ]; then
    echo -e "${GREEN}✓ Successfully connected to Cursor API${NC}"
else
    echo -e "${RED}✗ Failed to connect to Cursor API (HTTP $http_code)${NC}"
    echo "Please check your API key and try again."
    exit 1
fi

# Check git configuration
echo ""
echo -e "${BOLD}Checking git configuration...${NC}"

if command -v git >/dev/null 2>&1; then
    if git config user.name >/dev/null 2>&1 && git config user.email >/dev/null 2>&1; then
        echo -e "${GREEN}✓ Git is configured${NC}"
        echo -e "  Name:  $(git config user.name)"
        echo -e "  Email: $(git config user.email)"
    else
        echo -e "${YELLOW}! Git user not configured${NC}"
        echo "This is needed for commits. Configure with:"
        echo -e "${YELLOW}  git config --global user.name \"Your Name\"${NC}"
        echo -e "${YELLOW}  git config --global user.email \"your.email@example.com\"${NC}"
        read -p "Continue anyway? (y/n) " -n 1 -r
        echo ""
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
    fi
else
    echo -e "${RED}✗ Git not found${NC}"
    exit 1
fi

# Check git credentials
echo ""
echo -e "${BOLD}Checking git credentials...${NC}"
echo -e "${YELLOW}Note: You'll need git credentials to push/pull from your repository.${NC}"

if git config credential.helper >/dev/null 2>&1; then
    echo -e "${GREEN}✓ Git credential helper configured: $(git config credential.helper)${NC}"
else
    echo -e "${YELLOW}! No git credential helper configured${NC}"
    echo "You may need to enter credentials repeatedly, or configure a credential helper:"
    echo -e "${YELLOW}  git config --global credential.helper osxkeychain  # macOS${NC}"
    echo -e "${YELLOW}  git config --global credential.helper cache       # Linux${NC}"
fi

# Create example config if it doesn't exist
echo ""
echo -e "${BOLD}Creating configuration...${NC}"

if [ -f "master-agent-config.json" ]; then
    echo -e "${YELLOW}! master-agent-config.json already exists${NC}"
    read -p "Do you want to overwrite it? (y/n) " -n 1 -r
    echo ""
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${BLUE}Keeping existing configuration${NC}"
    else
        cat > master-agent-config.json <<'EOF'
{
  "repository": "https://github.com/your-username/your-repo",
  "ref": "main",
  "iterations": [
    {
      "text": "Add a README.md file with installation instructions"
    },
    {
      "text": "Create a basic project structure with src/ and test/ directories"
    },
    {
      "text": "Add a .gitignore file appropriate for the project"
    }
  ]
}
EOF
        echo -e "${GREEN}✓ Created master-agent-config.json${NC}"
    fi
else
    cat > master-agent-config.json <<'EOF'
{
  "repository": "https://github.com/your-username/your-repo",
  "ref": "main",
  "iterations": [
    {
      "text": "Add a README.md file with installation instructions"
    },
    {
      "text": "Create a basic project structure with src/ and test/ directories"
    },
    {
      "text": "Add a .gitignore file appropriate for the project"
    }
  ]
}
EOF
    echo -e "${GREEN}✓ Created master-agent-config.json${NC}"
fi

# Get current git info if in a repo
echo ""
echo -e "${BOLD}Git repository information:${NC}"

if git rev-parse --git-dir > /dev/null 2>&1; then
    REPO_URL=$(git config --get remote.origin.url | sed 's/\.git$//' | sed 's/git@github.com:/https:\/\/github.com\//')
    CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)

    echo -e "  Repository: ${CYAN}$REPO_URL${NC}"
    echo -e "  Branch:     ${CYAN}$CURRENT_BRANCH${NC}"
    echo ""

    read -p "Do you want to update master-agent-config.json with this info? (y/n) " -n 1 -r
    echo ""

    if [[ $REPLY =~ ^[Yy]$ ]]; then
        # Update config file with current repo and branch
        jq --arg repo "$REPO_URL" --arg ref "$CURRENT_BRANCH" \
           '.repository = $repo | .ref = $ref' \
           master-agent-config.json > master-agent-config.json.tmp
        mv master-agent-config.json.tmp master-agent-config.json
        echo -e "${GREEN}✓ Updated configuration with current repository and branch${NC}"
    fi
else
    echo -e "${YELLOW}  Not in a git repository${NC}"
    echo -e "${YELLOW}  You'll need to manually edit master-agent-config.json${NC}"
fi

# Setup workspace directory
echo ""
echo -e "${BOLD}Workspace setup...${NC}"
WORKSPACE_DIR="${WORKSPACE_DIR:-$HOME/.master-agent-workspace}"
echo -e "Workspace will be: ${CYAN}$WORKSPACE_DIR${NC}"

if [ -d "$WORKSPACE_DIR" ]; then
    echo -e "${YELLOW}! Workspace directory already exists${NC}"
    read -p "Do you want to delete it and start fresh? (y/n) " -n 1 -r
    echo ""
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        rm -rf "$WORKSPACE_DIR"
        echo -e "${GREEN}✓ Cleaned workspace directory${NC}"
    else
        echo -e "${BLUE}Keeping existing workspace${NC}"
    fi
fi

echo -e "${CYAN}The workspace will be created automatically when you run master-agent${NC}"
echo -e "${YELLOW}Note: Set WORKSPACE_DIR environment variable to use a different location${NC}"

# Make script executable
chmod +x master-agent

echo ""
echo -e "${GREEN}${BOLD}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo -e "${GREEN}${BOLD}Setup complete!${NC}"
echo -e "${GREEN}${BOLD}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo ""
echo -e "${BOLD}Next steps:${NC}"
echo ""
echo -e "  ${YELLOW}1.${NC} Edit your configuration:"
echo -e "     ${CYAN}nano master-agent-config.json${NC}"
echo ""
echo -e "  ${YELLOW}2.${NC} Run the Master Agent:"
echo -e "     ${CYAN}./master-agent master-agent-config.json${NC}"
echo ""
echo -e "  ${YELLOW}3.${NC} Or with custom update interval (in seconds):"
echo -e "     ${CYAN}./master-agent master-agent-config.json 15${NC}"
echo ""
echo -e "  ${YELLOW}4.${NC} Enable debug mode for verbose logging:"
echo -e "     ${CYAN}DEBUG=true ./master-agent master-agent-config.json${NC}"
echo ""
echo -e "${BOLD}How it works:${NC}"
echo -e "  • Each agent works on the ${CYAN}$CURRENT_BRANCH${NC} branch"
echo -e "  • Agent creates a new branch with changes"
echo -e "  • Master Agent automatically merges changes back to ${CYAN}$CURRENT_BRANCH${NC}"
echo -e "  • Next agent sees all previous changes"
echo -e "  • Local workspace at: ${CYAN}$WORKSPACE_DIR${NC}"
echo ""
echo -e "${BOLD}Environment variables:${NC}"
echo -e "  ${CYAN}CURSOR_API_KEY${NC}  - Your Cursor API key (required)"
echo -e "  ${CYAN}WORKSPACE_DIR${NC}   - Local git workspace (default: ~/.master-agent-workspace)"
echo -e "  ${CYAN}DEBUG${NC}           - Enable debug logging (set to 'true')"
echo ""